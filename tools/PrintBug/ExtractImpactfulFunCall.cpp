#include "SlimmerTools.h"

/// Extract the function calls that impact the outside enviroment.
///
/// \param pin_trace_file_name - path to trace file generated by PIN tool.
/// \param impactful_fun_call - recording the function calls that impact the
/// outside enviroment.
///
void ExtractImpactfulFunCall(char *pin_trace_file_name,
                             set<uint64_t> &impactful_fun_call) {
  impactful_fun_call.clear();

  boost::iostreams::mapped_file_source trace(pin_trace_file_name);
  auto data = trace.data();
  char event_label;
  uint64_t *tid_ptr, *fun_ptr;

  map<uint64_t, stack<pair<uint64_t, uint32_t> > > fun_stack;
  map<pair<uint64_t, uint64_t>, uint32_t> FunCount;

  bool ended = false;
  char *buffer = (char *)malloc(COMPRESS_BLOCK_SIZE);

  for (size_t _ = 0; !ended && _ < trace.size();) {
    uint64_t length = (*(uint64_t *)(&data[_]));
    _ += sizeof(uint64_t);

    uint64_t decoded = LZ4_decompress_safe((const char *)&data[_], buffer,
                                           length, COMPRESS_BLOCK_SIZE);
    for (uint64_t cur = 0; !ended && cur < decoded;) {
      event_label = buffer[cur];
      switch (event_label) {
      case EndEventLabel:
        ++cur;
        ended = true;
        break;
      case CallEventLabel:
        tid_ptr = (uint64_t *)(&buffer[cur + 1]);
        fun_ptr = (uint64_t *)(&buffer[cur + 65]);
        cur += 130;
        // printf("CallEvent %lu %p\n", *tid_ptr, (void*)*fun_ptr);
        fun_stack[*tid_ptr]
            .push(I(*fun_ptr, FunCount[I(*tid_ptr, *fun_ptr)]++));
        break;
      case ReturnEventLabel:
        tid_ptr = (uint64_t *)(&buffer[cur + 1]);
        fun_ptr = (uint64_t *)(&buffer[cur + 65]);
        cur += 130;
        // printf("ReturnEvent %lu %p\n", *tid_ptr, (void*)*fun_ptr);
        while (!fun_stack[*tid_ptr].empty() &&
               fun_stack[*tid_ptr].top().first != (*fun_ptr))
          fun_stack[*tid_ptr].pop();
        if (!fun_stack[*tid_ptr].empty())
          fun_stack[*tid_ptr].pop();
        break;
      case SyscallEventLabel:
        tid_ptr = (uint64_t *)(&buffer[cur + 1]);
        // printf("SyscallEvent %lu\n", *tid_ptr);
        cur += 66;

        if (fun_stack[*tid_ptr].size() == 0)
          break;
        uint64_t fun = fun_stack[*tid_ptr].top().first;
        // printf("The %d-th execution of function %p of thread %lu is
        // impactful\n",
        //   cnt, (void*)fun, *tid_ptr);
        impactful_fun_call.insert(fun);
        break;
      }
    }
    _ += length + sizeof(uint64_t);
  }
}
